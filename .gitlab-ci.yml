image: docker:19.03.0

stages:
- build
- release
- release-tag

variables:
  DOCKER_DRIVER: overlay2
  # Create the certificates inside this directory for both the server
  # and client. The certificates used by the client will be created in
  # /certs/client so we only need to share this directory with the
  # volume mount in `config.toml`.
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_BATCH: "unbabel-batch"
  IMAGE_STREAMING: "unbabel-streaming"
  TEST_IMAGE_BATCH: $CI_REGISTRY/$IMAGE_BATCH:test
  RELEASE_IMAGE_BATCH: $CI_REGISTRY/$IMAGE_BATCH:latest
  RELEASE_TAG_IMAGE_BATCH: $CI_REGISTRY/$IMAGE_BATCH:$CI_COMMIT_TAG
  TEST_IMAGE_STREAMING: $CI_REGISTRY/$IMAGE_STREAMING:test
  RELEASE_IMAGE_STREAMING: $CI_REGISTRY/$IMAGE_STREAMING:latest
  RELEASE_TAG_IMAGE_STREAMING: $CI_REGISTRY/$IMAGE_STREAMING:$CI_COMMIT_TAG

services:
  - docker:19.03.0-dind

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

build:
  stage: build
  script:
    - docker build --network=host --pull -t $TEST_IMAGE_BATCH \
      -f batch/Dockerfile .
    - docker push $TEST_IMAGE_BATCH
    - docker build --network=host --pull -t $TEST_IMAGE_STREAMING \
      -f streaming/Dockerfile .
    - docker push $TEST_IMAGE_STREAMING

release:
  stage: release
  script:
    - docker pull $TEST_IMAGE_BATCH
    - docker tag $TEST_IMAGE_BATCH $RELEASE_IMAGE_BATCH
    - docker push $RELEASE_IMAGE_BATCH
    - docker pull $TEST_IMAGE_STREAMING
    - docker tag $TEST_IMAGE_STREAMING $RELEASE_IMAGE_STREAMING
    - docker push $RELEASE_IMAGE_STREAMING
  only:
    - master

release-tag:
  stage: release-tag
  script:
    - docker pull $TEST_IMAGE_BATCH
    - docker tag $TEST_IMAGE_BATCH $RELEASE_TAG_IMAGE_BATCH
    - docker push $RELEASE_TAG_IMAGE_BATCH
    - docker pull $TEST_IMAGE_STREAMING
    - docker tag $TEST_IMAGE_STREAMING $RELEASE_TAG_IMAGE_STREAMING
    - docker push $RELEASE_TAG_IMAGE_STREAMING
  only:
    - tags
